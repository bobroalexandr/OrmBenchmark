package com.sebbia.ormbenchmark.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GREEN_DAO_ENTITY.
*/
public class GreenDaoEntityDao extends AbstractDao<GreenDaoEntity, Long> {

    public static final String TABLENAME = "GREEN_DAO_ENTITY";

    /**
     * Properties of entity GreenDaoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Field1 = new Property(1, String.class, "field1", false, "FIELD1");
        public final static Property Field2 = new Property(2, String.class, "field2", false, "FIELD2");
        public final static Property Field3 = new Property(3, String.class, "field3", false, "FIELD3");
        public final static Property Field4 = new Property(4, int.class, "field4", false, "FIELD4");
        public final static Property Field5 = new Property(5, long.class, "field5", false, "FIELD5");
    };


    public GreenDaoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public GreenDaoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GREEN_DAO_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'FIELD1' TEXT," + // 1: field1
                "'FIELD2' TEXT," + // 2: field2
                "'FIELD3' TEXT," + // 3: blobArray
                "'FIELD4' INTEGER," + // 3: blobArray
                "'FIELD5' INTEGER);"); // 4: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GREEN_DAO_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GreenDaoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String field1 = entity.getField1();
        if (field1 != null) {
            stmt.bindString(2, field1);
        }
 
        String field2 = entity.getField2();
        if (field2 != null) {
            stmt.bindString(3, field2);
        }

        String field3 = entity.getField3();
        if (field3 != null) {
            stmt.bindString(4, field3);
        }

        stmt.bindLong(5, entity.getField4());
        stmt.bindLong(6, entity.getField5());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GreenDaoEntity readEntity(Cursor cursor, int offset) {
        GreenDaoEntity entity = new GreenDaoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0),
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1),
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2),
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3),
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4),
                cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5)
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GreenDaoEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setField1(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setField2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setField3(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setField4(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setField5(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GreenDaoEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GreenDaoEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
